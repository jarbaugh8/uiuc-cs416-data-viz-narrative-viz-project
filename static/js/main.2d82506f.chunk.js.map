{"version":3,"sources":["BarChart.js","hooks/useD3.js","App.js","reportWebVitals.js","index.js"],"names":["BarChart","data","ref","renderChartFn","dependencies","React","useRef","useEffect","d3","current","useD3","svg","margin","console","log","map","Array","isArray","from","x","domain","d","date","rangeRound","padding","y1","cases","select","call","g","attr","tickValues","width","filter","v","undefined","tickSizeOuter","style","ticks","remove","append","text","selectAll","join","bandwidth","height","marginRight","marginLeft","className","App","useState","error","setError","isLoaded","setIsLoaded","setData","then","result","JSON","stringify","toString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d82506f.chunk.js","sourcesContent":["// https://www.pluralsight.com/guides/using-d3.js-inside-a-react-app\n\nimport { useD3 } from './hooks/useD3';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nfunction BarChart({ data }) {\n  const ref = useD3(\n    (svg) => {\n      const height = 500;\n      const width = 500;\n      const margin = { top: 20, right: 30, bottom: 30, left: 40 };\n\n      console.log(data);\n      console.log(data.map);\n      console.log(typeof data);\n      console.log(Array.isArray(data));\n      data = Array.from(data);\n      console.log(data)\n      console.log(data.map);\n      console.log(typeof data);\n      const x = d3\n        .scaleBand()\n        .domain(data.map((d) => d.date))\n        .rangeRound([margin.left, width - margin.right])\n        .padding(0.1);\n\n      const y1 = d3\n        .scaleLinear()\n        .domain([0, d3.max(data, (d) => d.cases)])\n        .rangeRound([height - margin.bottom, margin.top]);\n\n      const xAxis = (g) =>\n        g.attr(\"transform\", `translate(0,${height - margin.bottom})`).call(\n          d3\n            .axisBottom(x)\n            .tickValues(\n              d3\n                .ticks(...d3.extent(x.domain()), width / 40)\n                .filter((v) => x(v) !== undefined)\n            )\n            .tickSizeOuter(0)\n        );\n\n      const y1Axis = (g) =>\n        g\n          .attr(\"transform\", `translate(${margin.left},0)`)\n          .style(\"color\", \"steelblue\")\n          .call(d3.axisLeft(y1).ticks(null, \"s\"))\n          .call((g) => g.select(\".domain\").remove())\n          .call((g) =>\n            g\n              .append(\"text\")\n              .attr(\"x\", -margin.left)\n              .attr(\"y\", 10)\n              .attr(\"fill\", \"currentColor\")\n              .attr(\"text-anchor\", \"start\")\n              .text(data.y1)\n          );\n\n      svg.select(\".x-axis\").call(xAxis);\n      svg.select(\".y-axis\").call(y1Axis);\n\n      svg\n        .select(\".plot-area\")\n        .attr(\"fill\", \"steelblue\")\n        .selectAll(\".bar\")\n        .data(data)\n        .join(\"rect\")\n        .attr(\"class\", \"bar\")\n        .attr(\"x\", (d) => x(d.date))\n        .attr(\"width\", x.bandwidth())\n        .attr(\"y\", (d) => y1(d.cases))\n        .attr(\"height\", (d) => y1(0) - y1(d.cases));\n    },\n    [] // TODO: Consider changing, should things need to change over time.\n  );\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 500,\n        width: \"100%\",\n        marginRight: \"0px\",\n        marginLeft: \"0px\",\n      }}\n    >\n      <g className=\"plot-area\" />\n      <g className=\"x-axis\" />\n      <g className=\"y-axis\" />\n    </svg>\n  );\n}\n\nexport default BarChart;\n","// https://www.pluralsight.com/guides/using-d3.js-inside-a-react-app\nimport React from 'react';\nimport * as d3 from 'd3';\n\nexport const useD3 = (renderChartFn, dependencies) => {\n    const ref = React.useRef();\n\n    React.useEffect(() => {\n        renderChartFn(d3.select(ref.current));\n        return () => {};\n      }, dependencies);\n    return ref;\n}\n","import React, { useState, useEffect } from 'react';\nimport BarChart from './BarChart';\nimport './App.css';\nimport * as d3 from 'd3';\n\nfunction App() {\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [data, setData] = useState([]);\n\n  console.log(\"error: \", error);\n  console.log(\"isLoaded: \", isLoaded);\n  console.log(\"data: \", data);\n\n  useEffect(() => {\n    d3.csv(\"https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv\")\n      .then(\n        (result) => {\n          console.log(\"Data loaded!\");\n          console.log(\"Result:\");\n          console.log(result);\n          console.log(JSON.stringify(result));\n          setData(result);\n          setIsLoaded(true);\n          console.log(\"Done calling hooks.\");\n        },\n        (error) => {\n          console.log(\"Error!\");\n          console.log(error);\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, []);\n\n  if (!isLoaded) {\n    return (\n      <div>\n        Loading...\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div>\n        { error.toString() }\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <BarChart data={data} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}